jdbc编程步骤:
	1,加载数据库驱动
	2,创建并且取得数据库连接
	3,创建jdbc statement对象
	4,设置sql语句
	5,设置sql语句中的参数(使用preparedStatement)
	6,通过statement执行sql语句获取结果
	7,对sql执行结果进行解析处理
	8,释放资源
问题总结:
	1,每次执行sql语句的时候都要创建一次数据库连接,不使用就关闭,频繁的开启关闭造成了系统资源浪费.影响性能
	改进:以后会使用数据库连接池,进行数据库连接管理
	2,将sql语句和Java代码放在一起,不利于系统维护
	改进:将sql语句配置到xml配置文件中,
	3,在prepareStatement中设置参数,对占位符参数值进行设置,编码在Java代码中,不利于系统维护
	改进:将sql语句以及占位符参数等都配置在xml文件中,
	4,从ResultSet中遍历结果集数据,存在硬解码,将获取表的的字段进行硬解码.不利于系统维护
	改进:将查询的结果集,自动映射成Java对象
参考代码见otto chapter13 jdbcTest.java


JDBC典型用法;
JDBC提供了独立于数据库的统一API,用以执行SQL命令,主要由以下常用类和接口组成:
1,DriverManager
	用于管理JDBC驱动的服务类,程序中使用该类的功能主要是获取Connection,该类包括如下方法,
1)public static Connection getConnection(String url,String user, String password) throws SQLException.

2,Connection
	代表数据库的连接对象,每个Connection带博鳌一个物理连接回话,要想访问数据库,就必须先获得Connection
该接口的常用方法有:
1)Statement createStatement() throws SQLException;返回一个Statement对象
2)PreparedStatement prepareStatement(String sql) throws SQLException;返回预编译的Statement对象,即将SQL
语句交到数据库进行预编译.
3)CallableStatement prepareCall(String sql) throws SQLException;该方法返回CallableStatement对象,该对象
用于调用存储过程.
上面三种方法都是Statement的子类,只有获取了Statement之后才可以执行SQL语句
4)rollback();事务回滚
5)setAutoCommit(boolean autoCommit);有关自动提交

3,Statement,用于执行SQL语句的工具接口.常用方法如下:
1)ResultSet executeQuery(String sql) throws SQLException;查询语句,并且返回查询结果对应的ResultSet对象


