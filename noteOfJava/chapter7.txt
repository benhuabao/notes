java的集合可以分为大致三类：1）Set,2)List,3)Map。
	1）Set代表无序，不可重复的集合，
	2）List有序，可以重复
	3）Map代表有映射关系
Java的集合都是两个接口Collectio（Set,List，Queue）和Map(HashMap,Hashtable等)派生而来的，
如果要访问List中的元素，可以访问索引；如果要访问Set，只能访问Set中的元素；如果要访问Map中的
元素，可以根据key来访问value。重要的类有HashSet,HashMap,Hashtable,ArrayList等。



Iterator遍历集合元素
Iterator主要用于遍历Collection中的元素，也称迭代器。接口中有三种方法：1:hasNext()如果元素还没遍历完，返回true,2:next()返回集合的下一个元
素,remove()删除上次next方法返回的元素。注意：当使用Iterator访问Collection的时候，只有通过Iterator的remove方法删除上一次next返回的集合元
素才行，不然会引起冲突。（个人理解：在Iterator操作集合的时候，集合是不能自己进行修改的，不然双方修改就会冲突）



foreach循环遍历集合：
foreach更加方便快捷，经常使用，同样在foreach的时候，集合本身改变内容也会引起冲突,foreach(类型 元素：集合)



Set接口：
不允许有相同的元素在同一个Set集合中，判断对象是否相等是根据hashcode方法和equals方法进行判断。所以重写equals方法的时候，也必须重写hashcode。
HashSet特点：1，不同步，如果多线程访问的话，需要保证同步，2）无序，3）null可以为元素



List接口：
有序集合，每个元素都有自己的索引，根据索引来找元素，默认按照添加顺序来设置索引
List接口和ListIterator接口：
List能使用Collection的所有接口方法，由于是有序的集合，所以List增加了一些根据索引来操作元素的方法。
ArrayList和Vector实现类：
这两个类都是基于数组实现的List类，所以他们内部也封装了一个可变化的动态Object[]数组，添加元素的时候，容量会自动增加的。
ArrayList是常用的，尽量少用Vector。两者区别有线程安全，性能，ArrayList不安全，性能高，



LinkedList实现了Queue接口，我们可以把他当做Queue使用来探索用法
LinkedList与ArrayList、Vector的实现机制完全不同，后两者内部都是数组的形式来保存集合中的元素，所以随机访问有很好的性能，LinkedList内部使用
双向链表形式来保存集合中的元素，因此插入删除元素性能出色（只需要改变指针所指的地址就行），实际上，由于Vector线程同步，各方面性能都有下降
根据性能测试，得出结论：如果要遍历List集合，应该使用get（index）,对于LinkedList,只能使用Iterator遍历。



Map
Map代表映射关系的集合.kv键值对，Key是不允许重复的，map中添加，删除是put,remove
HashMap和Hashtable实现类
这是两个最经典的实现类，区别：1，Hashtable线程安全，因此性能低一些，尽量少用，即使需要创建线程安全的Map类，也可以使用Collections工具类把
HashMap变成线程安全的,2，Hashtable不允许null作为kv，会引发空指针异常，HashMap可以使用null作为键与值
因为key不能有重复，所以key必须要实现hashcode方法和equals方法，判断连两个key相等的标准：1，两个key通过equals方法返回的方法是true，2，通过hashcode返回的值一样

